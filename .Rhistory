pacman::p_load(sjlabelled,
dplyr,
stargazer,
sjmisc,
summarytools,
kableExtra,
sjPlot,
corrplot,
sessioninfo,
ggplot2)
stargazer(proc_data,type = "text")
sjmisc::descr(proc_data)
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n")) %>%
kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
library(haven)
library(pacman)
pacman::p_load(dplyr, sjmisc, car, sjlabelled, stargazer, sjmisc, summarytools, kableExtra, sjPlot, corrplot, sessioninfo, ggplot2, tidyverse, psych)
library(texreg)
install.packages("texreg")
library(texreg)
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
install.packages("BiocManager")
library(BiocManager)
psych::alpha(dplyr::select(proc_data, demo_mejor, simpatizante, satisfacción))
psych::alpha(dplyr::select(proc_data, demo_mejor, simpatizante, satisfacción))
pacman::p_load(dplyr, guaguas, ggplot2, sjmisc, car, sjlabelled, stargazer, haven)
rm(list=ls())
options(scipen=999)
LAPOP <- read_dta("input/Chile LAPOP AmericasBarometer 2019 v1.0_W.dta")
find_var(data = LAPOP,"democracia")
proc_data <- LAPOP %>% select(ing4, pn4, vb11)
sjlabelled::get_label(proc_data)
frq(proc_data$ing4)
frq(proc_data$pn4)
frq(proc_data$vb11)
proc_data <- proc_data %>% rename("demo_mejor"=ing4,
"satisfacción"=pn4,
"simpatizante"=vb11)
proc_data$demo_mejor <- as.factor(proc_data$demo_mejor)
proc_data$simpatizante <- as.factor(proc_data$simpatizante)
proc_data$satisfacción <- as.factor(proc_data$satisfacción)
proc_data$simpatizante <- dplyr::recode(proc_data$simpatizante,
"1301" = "PS",
"1302" = "PPD",
"1303" = "DC",
"1304" = "RN",
"1305" = "UDI",
"1306" = "PH",
"1307" = "PC",
"1308" = "PRSD",
"1309" = "RD",
"1310" = "EVOPOLI",
"1377" = "OTRO")
frq(proc_data$simpatizante)
proc_data$satisfacción <- dplyr::recode(proc_data$satisfacción,
"1" = "Muy satisfecho",
"2" = "Satisfecho",
"3" = "Insatisfecho",
"4" = "Muy insatisfecho")
frq(proc_data$satisfacción)
proc_data$demo_mejor <- dplyr::recode(proc_data$demo_mejor,
"1" = "Muy en
desacuerdo",
"2" = "Medianamente
en desacuerdo",
"3" = "Desacuerdo",
"4" = "Ni de acuerdo
ni en desacuerdo",
"5" = "De acuerdo",
"6" = "Medianamente
de acuerdo",
"7" = "Muy de acuerdo")
frq(proc_data$demo_mejor)
proc_data <-as.data.frame(proc_data)
stargazer(proc_data, type="text")
save(proc_data,file = "input/LAPOPproc.RData")
install.packages("sjPlot", repos = "http://cran.us.r-project.org")
library(sjPlot)
sjt.xtab(proc_data$satisfacción, proc_data$simpatizante)
pacman::p_load(sjlabelled,
dplyr,
stargazer,
sjmisc,
summarytools,
kableExtra,
sjPlot,
corrplot,
sessioninfo,
ggplot2)
stargazer(proc_data,type = "text")
sjmisc::descr(proc_data)
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n")) %>%
kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
library(dplyr)
proc_data %>% group_by(simpatizante) %>% summarise(frecuencia = n(), .groups = "drop")
ggplot(proc_data, aes(x = satisfacción)) +
geom_bar(fill = "purple", color = "black") +
labs(title = "Gráfico de Barras de satisfacción por la democracia",
x = "Satisfacción",
y = "Frecuencia")
ggplot(proc_data, aes(x = demo_mejor)) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Gráfico de Barras de Preferencia a la Democracia",
x = "Preferencia a la Democracia",
y = "Frecuencia")
library(haven)
library(pacman)
pacman::p_load(dplyr, sjmisc, car, sjlabelled, stargazer, sjmisc, summarytools, kableExtra, sjPlot, corrplot, sessioninfo, ggplot2, tidyverse, psych)
install.packages("texreg")
library(texreg)
install.packages("ggpubr")
library(ggpubr)
install.packages("BiocManager")
library(BiocManager)
psych::alpha(dplyr::select(proc_data, demo_mejor, simpatizante, satisfacción))
psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))
print(colnames(proc_data))
selected_data <- dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante)
print(head(selected_data))
print(summary(selected_data))
alpha(selected_data)
psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))
psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))
psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))
psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))
table(proc_data$demo_mejor)
table(proc_data$satisfacción)
table(proc_data$simpatizante)
sum(is.na(proc_data$demo_mejor))
sum(is.na(proc_data$satisfacción))
sum(is.na(proc_data$simpatizante))
proc_data_sin_na <- na.omit(proc_data)
sum(is.na(proc_data$demo_mejor))
sum(is.na(proc_data$satisfacción))
sum(is.na(proc_data$simpatizante))
proc_data_sin_na <- proc_data[complete.cases(proc_data), ]
sum(is.na(proc_data$demo_mejor))
sum(is.na(proc_data$satisfacción))
sum(is.na(proc_data$simpatizante))
selected_data <- dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante)
clean_data <- na.omit(selected_data)
print(summary(clean_data))
sum(is.na(proc_data$demo_mejor))
sum(is.na(proc_data$satisfacción))
sum(is.na(proc_data$simpatizante))
sum(is.na(clean_data$demo_mejor))
sum(is.na(clean_data$satisfacción))
sum(is.na(clean_data$simpatizante))
psych::alpha(dplyr::select(clean_data, demo_mejor, satisfacción, simpatizante))
psych::alpha(dplyr::select(clean_data, demo_mejor, satisfacción, simpatizante))
clean_data$demo_mejor[is.na(proc_data$demo_mejor)] <- mean(clean_data$demo_mejor, na.rm = TRUE)
clean_data$demo_mejor[is.na(proc_data$demo_mejor)] <- mean(clean_data$demo_mejor, na.rm = TRUE)
clean_data$demo_mejor[is.na(clean_data$demo_mejor)] <- mean(clean_data$demo_mejor, na.rm = TRUE)
clean_data$satisfacción[is.na(clean_data$satisfacción)] <- mean(clean_data$satisfacción, na.rm = TRUE)
clean_data$simpatizante[is.na(clean_data$simpatizante)] <- mean(clean_data$simpatizante, na.rm = TRUE)
class(clean_data$simpatizante)
class(proc_data$simpatizante)
proc_data$simpatizante[is.na(proc_data$simpatizante)] <- mode(proc_data$simpatizante, na.rm = TRUE)
moda_simpatizante <- as.character(stats::mode(clean_data$simpatizante))
moda_simpatizante <- levels(clean_data$simpatizante)[which.max(table(clean_data$simpatizante))]
# Reemplazar valores faltantes con la moda
clean_data$simpatizante[is.na(clean_data$simpatizante)] <- moda_simpatizante
proc_data$demo_mejor[is.na(proc_data$demo_mejor)] <- mean(proc_data$demo_mejor, na.rm = TRUE)
proc_data$satisfacción[is.na(proc_data$satisfacción)] <- mean(proc_data$satisfacción, na.rm = TRUE)
moda_satisfaccion <- levels(proc_data$satisfacción)[which.max(table(proc_data$satisfacción))]
proc_data$satisfacción[is.na(proc_data$satisfacción)] <- moda_satisfaccion
psych::alpha(dplyr::select(proc_data, moda_satisfaccion, moda_demo_mejor, moda_simpatizante))
psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))
psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))
# Verifica los nombres de las columnas
print(colnames(proc_data))
# Imprimir las primeras filas de las columnas seleccionadas
selected_data <- dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante)
print(head(selected_data))
# Resumen de los datos seleccionados
print(summary(selected_data))
clean_data <- proc_data %>%
select(demo_mejor, satisfacción, simpatizante) %>%
mutate(across(everything(), as.numeric)) %>%  # Convertir todas las columnas a numérico
drop_na()
# Verificar el resultado de la limpieza
print(summary(clean_data))
library(psych)
# Calcular el alpha de Cronbach
alpha_result <- alpha(clean_data)
# Imprimir el resultado
print(alpha_result)
print(apply(clean_data, 2, var))
psych::alpha(dplyr::select(clean_data, demo_mejor, satisfacción, simpatizante))
psych::alpha(dplyr::select(proc_data_sin_na, demo_mejor, satisfacción, simpatizante))
# Cargar las librerías necesarias
library(dplyr)
library(tidyr)
library(psych)
# Verificar si las columnas existen en el dataframe
print(colnames(proc_data))
# Seleccionar, convertir a numérico y limpiar las columnas de interés
clean_data <- proc_data %>%
select(demo_mejor, satisfacción, simpatizante) %>%
mutate(across(everything(), as.numeric)) %>%  # Convertir todas las columnas a numérico
drop_na()
# Verificar el resultado de la limpieza
print(summary(clean_data))
# Calcular el alpha de Cronbach
alpha_result <- alpha(clean_data)
# Imprimir el resultado
print(alpha_result)
# Cargar las librerías necesarias
library(dplyr)
library(tidyr)
library(psych)
# Verificar si las columnas existen en el dataframe
print(colnames(proc_data))
# Seleccionar, convertir a numérico y limpiar las columnas de interés
clean_data <- proc_data %>%
select(demo_mejor, satisfacción, simpatizante) %>%
mutate(across(everything(), as.numeric)) %>%  # Convertir todas las columnas a numérico
drop_na()
# Verificar el resultado de la limpieza
print(summary(clean_data))
# Calcular el alpha de Cronbach
alpha_result <- alpha(clean_data)
# Imprimir el resultado
print(alpha_result)
proc_data <- proc_data %>%
rowwise() %>%
mutate(cohesion_barrial = sum(demo_mejor, satisfacción, simpatizante, na.rm = TRUE))
# Cargar las librerías necesarias
library(dplyr)
library(tidyr)
# Seleccionar, convertir a numérico y limpiar las columnas de interés
proc_data <- proc_data %>%
select(demo_mejor, satisfacción, simpatizante) %>%
mutate(across(everything(), as.numeric)) %>%  # Convertir todas las columnas a numérico
drop_na()
# Crear la nueva columna 'cohesion_barrial'
proc_data <- proc_data %>%
rowwise() %>%
mutate(cohesion_barrial = sum(demo_mejor, satisfacción, simpatizante, na.rm = TRUE))
# Verificar el resumen de la nueva columna 'cohesion_barrial'
summary(proc_data$cohesion_barrial)
# Cargar las librerías necesarias
library(dplyr)
library(tidyr)
library(ggplot2)
# Seleccionar, convertir a numérico y limpiar las columnas de interés
proc_data <- proc_data %>%
select(demo_mejor, satisfacción, simpatizante) %>%
mutate(across(everything(), as.numeric)) %>%  # Convertir todas las columnas a numérico
drop_na()
# Crear la nueva columna 'cohesion_barrial'
proc_data <- proc_data %>%
rowwise() %>%
mutate(cohesion_barrial = sum(demo_mejor, satisfacción, simpatizante, na.rm = TRUE))
# Verificar el resumen de la nueva columna 'cohesion_barrial'
summary(proc_data$cohesion_barrial)
ggplot(proc_data, aes(x = cohesion_barrial)) +
geom_histogram(binwidth = 0.6, colour = "black", fill = "yellow") +
theme_bw() +
xlab("Cohesión barrial") +
ylab("Cantidad")
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n"))%>% # Selecciona estadísticos
kable(.,"markdown") # Esto es para que se vea bien en quarto
M <- cor(proc_data, use = "complete.obs") # Usar solo casos con observaciones completas
diag(M) = NA # Elimina la diagonal (correlaciones absolutas de cada variable consigmo misma)
rownames(M) <- c("A. Cohesión barrial",
"B. demo_mejor",
"C. satisfacción",
"D. simpatizante")
colnames(M) <-c("(A)", "(B)","(C)", "(D)")
corrplot::corrplot(M,
method = "color", # Cambia los círculos por color completo de cada cuadrante
addCoef.col = "#000390", # Color de los coeficientes
type = "upper", # Deja solo las correlaciones de arriba
tl.col = "black", # COlor letras, rojo por defecto
na.label = "-")
# Crear los modelos de regresión lineal
reg2 <- lm(cohesion_barrial ~ demo_mejor, data = proc_data)
reg3 <- lm(cohesion_barrial ~ satisfacción, data = proc_data)
reg4 <- lm(cohesion_barrial ~ simpatizante, data = proc_data)
# Generar el informe
knitreg(list(reg2, reg3, reg4),
custom.model.names = c("Modelo 1",
"Modelo 2",
"Modelo 3"),
custom.note = "*** p < 0.001; ** p < 0.01; * p < 0.05",
custom.coef.names = c("Intercepto",
"Demo Mejor",
"Satisfacción",
"Simpatizante"),
caption = "Cohesión Barrial",
caption.above = TRUE)
# Crear los modelos de regresión lineal
reg5 <- lm(cohesion_barrial ~ demo_mejor + satisfacción, data = proc_data)
reg6 <- lm(cohesion_barrial ~ demo_mejor + simpatizante, data = proc_data)
reg7 <- lm(cohesion_barrial ~ satisfacción + simpatizante, data = proc_data)
reg8 <- lm(cohesion_barrial ~ demo_mejor + satisfacción + simpatizante, data = proc_data)
# Generar el informe
knitreg(list(reg5, reg6, reg7, reg8),
custom.model.names = c("Modelo 1",
"Modelo 2",
"Modelo 3",
"Modelo 4"),
custom.note = "*** p < 0.001; ** p < 0.01; * p < 0.05",
custom.coef.names = c("Intercepto",
"Demo Mejor",
"Satisfacción",
"Simpatizante"),
caption = "Cohesión Barrial",
caption.above = TRUE)
# Generar el gráfico de efectos
plot_model(reg8,
title = "", # Quitar título
show.values = TRUE, # Mostrar valor de efectos
dot.size = 3, # Tamaño de los círculos
line.size = 1, # Tamaño del intervalo de confianza
value.size = 4, # Tamaño del valor de los efectos
spacing = 1, # Espacio entre efectos
vline.color = "red", # Línea roja en el punto neutro (0)
axis.labels = rev(c("Demo Mejor",
"Satisfacción",
"Simpatizante")), # Con rev porque automáticamente los tira en otro orden
show.legend = FALSE) + # No mostrar leyenda
theme_bw()
# Calcular los valores predichos
predicted_values <- predict(reg8, newdata = proc_data)
# Crear el gráfico
plot(proc_data$demo_mejor, predicted_values,
xlab = "Demo Mejor", ylab = "Valores Predichos",
main = "Valores Predichos vs. Demo Mejor",
pch = 16, col = "blue")  # Personaliza los puntos
# Añadir líneas de referencia
abline(reg8$coefficients[1], reg8$coefficients[2], col = "red")
library(dplyr)
library(tidyr)
library(psych)
print(colnames(proc_data))
clean_data <- proc_data %>%
select(demo_mejor, satisfacción, simpatizante) %>%
mutate(across(everything(), as.numeric)) %>%
drop_na()
print(summary(clean_data))
alpha_result <- alpha(clean_data)
print(alpha_result)
library(dplyr)
library(tidyr)
proc_data <- proc_data %>%
select(demo_mejor, satisfacción, simpatizante) %>%
mutate(across(everything(), as.numeric)) %>%
drop_na()
proc_data <- proc_data %>%
rowwise() %>%
mutate(cohesion_barrial = sum(demo_mejor, satisfacción, simpatizante, na.rm = TRUE))
summary(proc_data$cohesion_barrial)
ggplot(proc_data, aes(x = cohesion_barrial)) +
geom_histogram(binwidth = 0.6, colour = "black", fill = "yellow") +
theme_bw() +
xlab("Cohesión barrial") +
ylab("Cantidad")
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n"))%>%
kable(.,"markdown")
M <- cor(proc_data, use = "complete.obs")
diag(M) = NA
rownames(M) <- c("A. Cohesión barrial",
"B. demo_mejor",
"C. satisfacción",
"D. simpatizante")
colnames(M) <-c("(A)", "(B)","(C)", "(D)")
corrplot::corrplot(M,
method = "color",
addCoef.col = "#000390",
type = "upper",
tl.col = "black",
na.label = "-")
reg2 <- lm(cohesion_barrial ~ demo_mejor, data = proc_data)
reg3 <- lm(cohesion_barrial ~ satisfacción, data = proc_data)
reg4 <- lm(cohesion_barrial ~ simpatizante, data = proc_data)
knitreg(list(reg2, reg3, reg4),
custom.model.names = c("Modelo 1",
"Modelo 2",
"Modelo 3"),
custom.note = "*** p < 0.001; ** p < 0.01; * p < 0.05",
custom.coef.names = c("Intercepto",
"Demo Mejor",
"Satisfacción",
"Simpatizante"),
caption = "Cohesión Barrial",
caption.above = TRUE)
reg5 <- lm(cohesion_barrial ~ demo_mejor + satisfacción, data = proc_data)
reg6 <- lm(cohesion_barrial ~ demo_mejor + simpatizante, data = proc_data)
reg7 <- lm(cohesion_barrial ~ satisfacción + simpatizante, data = proc_data)
reg8 <- lm(cohesion_barrial ~ demo_mejor + satisfacción + simpatizante, data = proc_data)
knitreg(list(reg5, reg6, reg7, reg8),
custom.model.names = c("Modelo 1",
"Modelo 2",
"Modelo 3",
"Modelo 4"),
custom.note = "*** p < 0.001; ** p < 0.01; * p < 0.05",
custom.coef.names = c("Intercepto",
"Demo Mejor",
"Satisfacción",
"Simpatizante"),
caption = "Cohesión Barrial",
caption.above = TRUE)
# Generar el gráfico de efectos
plot_model(reg8,
title = "", # Quitar título
show.values = TRUE, # Mostrar valor de efectos
dot.size = 3, # Tamaño de los círculos
line.size = 1, # Tamaño del intervalo de confianza
value.size = 4, # Tamaño del valor de los efectos
spacing = 1, # Espacio entre efectos
vline.color = "red", # Línea roja en el punto neutro (0)
axis.labels = rev(c("Demo Mejor",
"Satisfacción",
"Simpatizante")), # Con rev porque automáticamente los tira en otro orden
show.legend = FALSE) + # No mostrar leyenda
theme_bw()
# Calcular los valores predichos
predicted_values <- predict(reg8, newdata = proc_data)
# Crear el gráfico
plot(proc_data$demo_mejor, predicted_values,
xlab = "Demo Mejor", ylab = "Valores Predichos",
main = "Valores Predichos vs. Demo Mejor",
pch = 16, col = "blue")  # Personaliza los puntos
# Añadir líneas de referencia
abline(reg8$coefficients[1], reg8$coefficients[2], col = "red")
predicted_values <- predict(reg8, newdata = proc_data)
plot(proc_data$satisfacción, predicted_values,
xlab = "Satisfacción con la democracia como régimen", ylab = "Valores Predichos",
main = "Valores Predichos vs. Satisfacción con la democracia como régimen",
pch = 16, col = "blue")
abline(reg8$coefficients[1], reg8$coefficients[2], col = "red")
predicted_values <- predict(reg8, newdata = proc_data)
plot(proc_data$simpatizante, predicted_values,
xlab = "Satisfacción con la democracia como régimen", ylab = "Valores Predichos",
main = "Valores Predichos vs. Satisfacción con la democracia como régimen",
pch = 16, col = "blue")
abline(reg8$coefficients[1], reg8$coefficients[2], col = "red")
predicted_values <- predict(reg8, newdata = proc_data)
plot(proc_data$simpatizante, predicted_values,
xlab = "Simpatizante con partido político", ylab = "Valores Predichos",
main = "Valores Predichos vs. Simpatizante con partido político",
pch = 16, col = "blue")
abline(reg8$coefficients[1], reg8$coefficients[2], col = "red")
options(repos = c(CRAN = "https://cran.rstudio.com"))
install.packages("texreg")
options(repos = c(CRAN = "https://cran.rstudio.com"))
install.packages("texreg")
install.packages("pacman", repos = "http://cran.us.r-project.org")
pacman::p_load(dplyr, guaguas, ggplot2, sjmisc, car, sjlabelled, stargazer, haven)
rm(list=ls())
options(scipen=999)
LAPOP <- read_dta("input/Chile LAPOP AmericasBarometer 2019 v1.0_W.dta")
find_var(data = LAPOP,"democracia")
proc_data <- LAPOP %>% select(ing4, pn4, vb11)
sjlabelled::get_label(proc_data)
frq(proc_data$ing4)
frq(proc_data$pn4)
frq(proc_data$vb11)
proc_data <- proc_data %>% rename("demo_mejor"=ing4,
"satisfacción"=pn4,
"simpatizante"=vb11)
proc_data$demo_mejor <- as.factor(proc_data$demo_mejor)
proc_data$simpatizante <- as.factor(proc_data$simpatizante)
proc_data$satisfacción <- as.factor(proc_data$satisfacción)
proc_data$simpatizante <- dplyr::recode(proc_data$simpatizante,
"1301" = "PS",
"1302" = "PPD",
"1303" = "DC",
"1304" = "RN",
"1305" = "UDI",
"1306" = "PH",
"1307" = "PC",
"1308" = "PRSD",
"1309" = "RD",
"1310" = "EVOPOLI",
"1377" = "OTRO")
frq(proc_data$simpatizante)
proc_data$satisfacción <- dplyr::recode(proc_data$satisfacción,
"1" = "Muy satisfecho",
"2" = "Satisfecho",
"3" = "Insatisfecho",
"4" = "Muy insatisfecho")
frq(proc_data$satisfacción)
proc_data$demo_mejor <- dplyr::recode(proc_data$demo_mejor,
"1" = "Muy en
desacuerdo",
"2" = "Medianamente
en desacuerdo",
"3" = "Desacuerdo",
"4" = "Ni de acuerdo
ni en desacuerdo",
"5" = "De acuerdo",
"6" = "Medianamente
de acuerdo",
"7" = "Muy de acuerdo")
frq(proc_data$demo_mejor)
proc_data <-as.data.frame(proc_data)
stargazer(proc_data, type="text")
save(proc_data,file = "input/LAPOPproc.RData")
install.packages("sjPlot", repos = "http://cran.us.r-project.org")
options(repos = c(CRAN = "https://cran.rstudio.com"))
install.packages("texreg")
