install.packages("pacman")
pacman::p_load(dplyr, guaguas, ggplot2, sjmisc, car, sjlabelled, stargazer, haven)
rm(list=ls())       
options(scipen=999) 
LAPOP <- read_dta("input/Chile LAPOP AmericasBarometer 2019 v1.0_W.dta")
find_var(data = LAPOP,"democracia")
proc_data <- LAPOP %>% select(ing4, pn4, vb11)
sjlabelled::get_label(proc_data)
frq(proc_data$ing4)
frq(proc_data$pn4)
frq(proc_data$vb11)
proc_data <- proc_data %>% rename("demo_mejor"=ing4,
                                  "satisfacción"=pn4,
                                  "simpatizante"=vb11)
proc_data$demo_mejor <- as.factor(proc_data$demo_mejor)
proc_data$simpatizante <- as.factor(proc_data$simpatizante)
proc_data$satisfacción <- as.factor(proc_data$satisfacción)
proc_data$simpatizante <- dplyr::recode(proc_data$simpatizante, 
                                        "1301" = "PS",
                                        "1302" = "PPD",
                                        "1303" = "DC",
                                        "1304" = "RN",
                                        "1305" = "UDI",
                                        "1306" = "PH",
                                        "1307" = "PC",
                                        "1308" = "PRSD",
                                        "1309" = "RD",
                                        "1310" = "EVOPOLI",
                                        "1377" = "OTRO")
frq(proc_data$simpatizante)
proc_data$satisfacción <- dplyr::recode(proc_data$satisfacción, 
                                        "1" = "Muy satisfecho",
                                        "2" = "Satisfecho",
                                        "3" = "Insatisfecho",
                                        "4" = "Muy insatisfecho")
frq(proc_data$satisfacción)
proc_data$demo_mejor <- dplyr::recode(proc_data$demo_mejor, 
                                      "1" = "Muy en 
                                             desacuerdo",
                                      "2" = "Medianamente 
                                             en desacuerdo",
                                      "3" = "Desacuerdo",
                                      "4" = "Ni de acuerdo
                                            ni en desacuerdo",
                                      "5" = "De acuerdo",
                                      "6" = "Medianamente 
                                             de acuerdo",
                                      "7" = "Muy de acuerdo")
frq(proc_data$demo_mejor)
proc_data <-as.data.frame(proc_data)
stargazer(proc_data, type="text")
save(proc_data,file = "input/LAPOPproc.RData")
install.packages("sjPlot")
library(sjPlot)
sjt.xtab(proc_data$satisfacción, proc_data$simpatizante)

pacman::p_load(sjlabelled,
               dplyr, 
               stargazer, 
               sjmisc, 
               summarytools, 
               kableExtra, 
               sjPlot, 
               corrplot, 
               sessioninfo, 
               ggplot2) 
stargazer(proc_data,type = "text")
sjmisc::descr(proc_data)
sjmisc::descr(proc_data,
              show = c("label","range", "mean", "sd", "NA.prc", "n")) %>%
  kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)

tabla_frecuencias <- proc_data %>%
  group_by(simpatizante) %>%
  summarise(frecuencia = n(), .groups = "drop")
print(tabla_frecuencias)

ggplot(proc_data, aes(x = satisfacción)) +
  geom_bar(fill = "purple", color = "black") +
  labs(title = "Gráfico de Barras de satisfacción por la democracia",
       x = "Satisfacción",
       y = "Frecuencia")

ggplot(proc_data, aes(x = demo_mejor)) +
  geom_bar(fill = "blue", color = "black") +
  labs(title = "Gráfico de Barras de Preferencia a la Democracia",
       x = "Preferencia a la Democracia",
       y = "Frecuencia") 



proc_data %>% group_by(simpatizante) %>% summarise(frecuencia = n(), .groups = "drop")


print(colnames(proc_data))

selected_data <- dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante)
print(head(selected_data))

print(summary(selected_data))
alpha(selected_data)

psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))

table(proc_data$demo_mejor)
table(proc_data$satisfacción)
table(proc_data$simpatizante)


sum(is.na(proc_data$demo_mejor))
sum(is.na(proc_data$satisfacción))
sum(is.na(proc_data$simpatizante))

proc_data_sin_na <- na.omit(proc_data)
proc_data_sin_na <- proc_data[complete.cases(proc_data), ]




selected_data <- dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante)

clean_data <- na.omit(selected_data)

print(summary(clean_data))

sum(is.na(clean_data$demo_mejor))
sum(is.na(clean_data$satisfacción))
sum(is.na(clean_data$simpatizante))

psych::alpha(dplyr::select(clean_data, demo_mejor, satisfacción, simpatizante))

clean_data$demo_mejor[is.na(proc_data$demo_mejor)] <- mean(clean_data$demo_mejor, na.rm = TRUE)
clean_data$satisfacción[is.na(proc_data$satisfacción)] <- mean(clean_data$satisfacción, na.rm = TRUE)
clean_data$simpatizante[is.na(proc_data$simpatizante)] <- mean(clean_data$simpatizante, na.rm = TRUE)



clean_data$demo_mejor[is.na(clean_data$demo_mejor)] <- mean(clean_data$demo_mejor, na.rm = TRUE)
clean_data$satisfacción[is.na(clean_data$satisfacción)] <- mean(clean_data$satisfacción, na.rm = TRUE)
clean_data$simpatizante[is.na(clean_data$simpatizante)] <- mean(clean_data$simpatizante, na.rm = TRUE)

class(proc_data$simpatizante)

proc_data$simpatizante[is.na(proc_data$simpatizante)] <- mode(proc_data$simpatizante, na.rm = TRUE)
moda_simpatizante <- as.character(stats::mode(clean_data$simpatizante))


moda_simpatizante <- levels(clean_data$simpatizante)[which.max(table(clean_data$simpatizante))]
clean_data$simpatizante[is.na(clean_data$simpatizante)] <- moda_simpatizante

proc_data$demo_mejor[is.na(proc_data$demo_mejor)] <- mean(proc_data$demo_mejor, na.rm = TRUE)
proc_data$satisfacción[is.na(proc_data$satisfacción)] <- mean(proc_data$satisfacción, na.rm = TRUE)

moda_demo_mejor <- levels(proc_data$demo_mejor)[which.max(table(proc_data$demo_mejor))]
proc_data$demo_mejor[is.na(proc_data$demo_mejor)] <- moda_demo_mejor

moda_satisfaccion <- levels(proc_data$satisfacción)[which.max(table(proc_data$satisfacción))]
proc_data$satisfacción[is.na(proc_data$satisfacción)] <- moda_satisfaccion


psych::alpha(dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante))


print(colnames(proc_data))

selected_data <- dplyr::select(proc_data, demo_mejor, satisfacción, simpatizante)
print(head(selected_data))

print(summary(selected_data))

clean_data <- proc_data %>%
  select(demo_mejor, satisfacción, simpatizante) %>%
  mutate(across(everything(), as.numeric)) %>%  
  drop_na()

print(summary(clean_data))

library(psych)

alpha_result <- alpha(clean_data)

print(alpha_result)

library(dplyr)
library(tidyr)
library(psych)

print(colnames(proc_data))

clean_data <- proc_data %>%
  select(demo_mejor, satisfacción, simpatizante) %>%
  mutate(across(everything(), as.numeric)) %>%  
  drop_na()

print(summary(clean_data))

alpha_result <- alpha(clean_data)

print(alpha_result)

ggplot(datos, aes(x = identificacion_politica, fill = preferencia_democracia)) +
  geom_bar(position = "fill") +
  labs(title = "Preferencia por la democracia según identificación política",
       x = "Identificación política",
       y = "Proporción") +
  scale_fill_brewer(palette = "Set3")


# Script R separado para generar la imagen
output_dir <- "C:/Users/beth8/OneDrive/Documentos/ProyectoR/ProyectoR/Output"
output_file <- file.path(output_dir, "G1.png")

# Crear el directorio si no existe
if (!dir.exists(output_dir)) {
  dir.create(output_dir, recursive = TRUE)
}

# Generar y guardar la gráfica
png(output_file)
plot(cars)
dev.off()

# Verificar que el archivo se ha creado
if (file.exists(output_file)) {
  print("La imagen se ha guardado correctamente.")
} else {
  print("Hubo un problema al guardar la imagen.")
}



# Generar y guardar una gráfica
output_dir <- "C:/Users/beth8/OneDrive/Documentos/ProyectoR/ProyectoR/Output"
output_file <- file.path(output_dir, "G1.png")

if (!dir.exists(output_dir)) {
  dir.create(output_dir, recursive = TRUE)
}

png(output_file)
plot(cars)
dev.off()

